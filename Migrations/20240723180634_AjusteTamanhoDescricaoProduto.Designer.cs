// <auto-generated />
using System;
using AuFood.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuFood.Migrations
{
    [DbContext(typeof(_DbContext))]
    [Migration("20240723180634_AjusteTamanhoDescricaoProduto")]
    partial class AjusteTamanhoDescricaoProduto
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8_general_ci")
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8");

            modelBuilder.Entity("AuFood.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("State_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("State_id");

                    b.ToTable("City");
                });

            modelBuilder.Entity("AuFood.Models.Consumer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<byte[]>("Password")
                        .HasMaxLength(128)
                        .HasColumnType("binary(128)")
                        .IsFixedLength();

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<ulong>("Phone_confirmed")
                        .HasColumnType("bit(1)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Consumer");
                });

            modelBuilder.Entity("AuFood.Models.Consumer_address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Complement")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("Consumer_id")
                        .HasColumnType("int");

                    b.Property<string>("Neighborhood")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Number")
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Street")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("ZipCode")
                        .HasColumnType("int(8)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("Consumer_id");

                    b.ToTable("Consumer_address");
                });

            modelBuilder.Entity("AuFood.Models.Consumer_store", b =>
                {
                    b.Property<int>("Store_id")
                        .HasColumnType("int");

                    b.Property<int>("Consumer_id")
                        .HasColumnType("int");

                    b.HasKey("Store_id", "Consumer_id");

                    b.HasIndex("Consumer_id");

                    b.ToTable("Consumer_store");
                });

            modelBuilder.Entity("AuFood.Models.Login", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<byte[]>("Password")
                        .HasColumnType("binary(128)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Profile")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Login");
                });

            modelBuilder.Entity("AuFood.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Consumer_address_id")
                        .HasColumnType("int");

                    b.Property<int>("Consumer_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("Delivery_method")
                        .HasColumnType("int(2)");

                    b.Property<int>("Payment_method")
                        .HasColumnType("int(2)");

                    b.Property<int?>("Status")
                        .HasColumnType("int(2)");

                    b.Property<int>("Store_id")
                        .HasColumnType("int");

                    b.Property<double>("Total_price")
                        .HasColumnType("double");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("Consumer_address_id");

                    b.HasIndex("Consumer_id");

                    b.HasIndex("Store_id");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("AuFood.Models.Order_product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Observation")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Order_id")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<int>("Product_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("Order_id");

                    b.HasIndex("Product_id");

                    b.ToTable("Order_product");
                });

            modelBuilder.Entity("AuFood.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("Product_category_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("Product_category_id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("AuFood.Models.Product_category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Product_category");
                });

            modelBuilder.Entity("AuFood.Models.Product_price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Day_week")
                        .HasColumnType("int(1)");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<int>("Product_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("Product_id");

                    b.ToTable("Product_price");
                });

            modelBuilder.Entity("AuFood.Models.Product_store", b =>
                {
                    b.Property<int>("Store_id")
                        .HasColumnType("int");

                    b.Property<int>("Product_id")
                        .HasColumnType("int");

                    b.HasKey("Store_id", "Product_id");

                    b.HasIndex("Product_id");

                    b.ToTable("Product_store");
                });

            modelBuilder.Entity("AuFood.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Uf")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("State");
                });

            modelBuilder.Entity("AuFood.Models.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Background_image")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("City_id")
                        .HasColumnType("int");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)");

                    b.Property<string>("Color_background")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Color_primary")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Color_secondary")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Number_address")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("Views")
                        .HasColumnType("int");

                    b.Property<string>("Whatsapp")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("City_id");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("AuFood.Models.Store_login", b =>
                {
                    b.Property<int>("Store_id")
                        .HasColumnType("int");

                    b.Property<int>("Login_id")
                        .HasColumnType("int");

                    b.HasKey("Store_id", "Login_id");

                    b.HasIndex("Login_id");

                    b.ToTable("Store_login");
                });

            modelBuilder.Entity("AuFood.Models.City", b =>
                {
                    b.HasOne("AuFood.Models.State", "State")
                        .WithMany("City")
                        .HasForeignKey("State_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_state_city");

                    b.Navigation("State");
                });

            modelBuilder.Entity("AuFood.Models.Consumer_address", b =>
                {
                    b.HasOne("AuFood.Models.Consumer", "Consumer")
                        .WithMany("Consumer_address")
                        .HasForeignKey("Consumer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_consumer_consumer_address");

                    b.Navigation("Consumer");
                });

            modelBuilder.Entity("AuFood.Models.Consumer_store", b =>
                {
                    b.HasOne("AuFood.Models.Consumer", "Consumer")
                        .WithMany("Consumer_store")
                        .HasForeignKey("Consumer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuFood.Models.Store", "Store")
                        .WithMany("Consumer_store")
                        .HasForeignKey("Store_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consumer");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("AuFood.Models.Order", b =>
                {
                    b.HasOne("AuFood.Models.Consumer_address", "Consumer_address")
                        .WithMany("Order")
                        .HasForeignKey("Consumer_address_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_order_consumer_address");

                    b.HasOne("AuFood.Models.Consumer", "Consumer")
                        .WithMany("Order")
                        .HasForeignKey("Consumer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_order_consumer");

                    b.HasOne("AuFood.Models.Store", "Store")
                        .WithMany("Order")
                        .HasForeignKey("Store_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_order_store");

                    b.Navigation("Consumer");

                    b.Navigation("Consumer_address");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("AuFood.Models.Order_product", b =>
                {
                    b.HasOne("AuFood.Models.Order", "Order")
                        .WithMany("Order_product")
                        .HasForeignKey("Order_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_order_product_order");

                    b.HasOne("AuFood.Models.Product", "Product")
                        .WithMany("Order_product")
                        .HasForeignKey("Product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_order_product_product");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AuFood.Models.Product", b =>
                {
                    b.HasOne("AuFood.Models.Product_category", "Product_category")
                        .WithMany("Product")
                        .HasForeignKey("Product_category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_product_product_category");

                    b.Navigation("Product_category");
                });

            modelBuilder.Entity("AuFood.Models.Product_price", b =>
                {
                    b.HasOne("AuFood.Models.Product", "Product")
                        .WithMany("Product_price")
                        .HasForeignKey("Product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_product_price_product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AuFood.Models.Product_store", b =>
                {
                    b.HasOne("AuFood.Models.Product", "Product")
                        .WithMany("Product_store")
                        .HasForeignKey("Product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuFood.Models.Store", "Store")
                        .WithMany("Product_store")
                        .HasForeignKey("Store_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("AuFood.Models.Store", b =>
                {
                    b.HasOne("AuFood.Models.City", "City")
                        .WithMany("Store")
                        .HasForeignKey("City_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_store_city");

                    b.Navigation("City");
                });

            modelBuilder.Entity("AuFood.Models.Store_login", b =>
                {
                    b.HasOne("AuFood.Models.Login", "Login")
                        .WithMany("Store_login")
                        .HasForeignKey("Login_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuFood.Models.Store", "Store")
                        .WithMany("Store_login")
                        .HasForeignKey("Store_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Login");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("AuFood.Models.City", b =>
                {
                    b.Navigation("Store");
                });

            modelBuilder.Entity("AuFood.Models.Consumer", b =>
                {
                    b.Navigation("Consumer_address");

                    b.Navigation("Consumer_store");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("AuFood.Models.Consumer_address", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("AuFood.Models.Login", b =>
                {
                    b.Navigation("Store_login");
                });

            modelBuilder.Entity("AuFood.Models.Order", b =>
                {
                    b.Navigation("Order_product");
                });

            modelBuilder.Entity("AuFood.Models.Product", b =>
                {
                    b.Navigation("Order_product");

                    b.Navigation("Product_price");

                    b.Navigation("Product_store");
                });

            modelBuilder.Entity("AuFood.Models.Product_category", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("AuFood.Models.State", b =>
                {
                    b.Navigation("City");
                });

            modelBuilder.Entity("AuFood.Models.Store", b =>
                {
                    b.Navigation("Consumer_store");

                    b.Navigation("Order");

                    b.Navigation("Product_store");

                    b.Navigation("Store_login");
                });
#pragma warning restore 612, 618
        }
    }
}
